#!/bin/bash

# Alex Baryiames, Spring Semester 2019
# Wick, R.R., Judd, L.M., Gorrie, C.L. and Holt, K.E., 2017. Completing bacterial genome assemblies with multiplex MinION sequencing. Microbial genomics, 3(10).
# Data Source: https://melbourne.figshare.com/ndownloader/articles/5170831/versions/1, https://melbourne.figshare.com/ndownloader/articles/5170843/versions/1
# SRA IDs: SAMEA3357010, SAMEA3357043, SAMN07211279, SAMN07211280, SAMEA3357223, SAMEA3357193, SAMEA3357346, SAMEA3357374, SAMEA3357320, SAMN07211281, SAMN07211282, SAMEA3357405
# Program List: Trim Galore, Albacore, Porechop, Unicycler, Canu, SPAdes, Pilon, Nanopolish, ABySS, Velvet



refdata=/home/abaryiames/Lab_Projects/polishtest/GCF_000240185.1_ASM24018v2_genomic.fna
reads=/usr/share/data/proj_data/pneumonia/5170843/barcode01.fastq
i_1=/usr/share/data/proj_data/pneumonia/5170831/barcode01_1.fastq.gz
i_2=/usr/share/data/proj_data/pneumonia/5170831/barcode01_2.fastq.gz
/all_segments.fasta
sample_name="barcode01"
mkdir $sample_name
cd $sample_name

logfile='log.txt'
touch $logfile
echo $datapath > $logfile

ls -lh $datapathO

#Nanoplot - Sequence Statistics, determine the quality of your long reads
NanoPlot --fastq $datapathO/$sample_name* --outdir Nanoplots

#Porechop - Gets rid of adapter seqs so that they don't interfere with assembly (adapter seqs aren't actaully part of the genome)
porechop -i $datapathO/$sample_name* -o barcode01_chop.fastq

chopped_pore=/home/abaryiames/Lab_Projects/pneumonia_script/barcode01_chop.fastq

#Canu - Assembly. Taking the chopped contigs and fitting them into one 5.5Mb genome
canu -p canu -d canu_dir genomeSize=5.5m maxThreads=8 -nanopore-raw $chopped_pore

assembly=/home/abaryiames/Lab_Projects/pneumonia_script/barcode01/canu_dir/canu.contigs.fasta

#Minimap / Racon - Polishing and statistics. Minimap and Racon polishes the Canu assembly by comparing it to the reference genome.
minimap -Sw5 -L100 -m0 -t2 $assembly $reads > mapIT01.paf
racon -t 16 $reads mapIT01.paf $assembly > mapIT01.fa
minimap -Sw5 -L100 -m0 -t2 mapIT01.fa $reads > mapIT02.paf
racon -t 16 $reads mapIT02.paf mapIT01.fa > mapIT02.fa
minimap -Sw5 -L100 -m0 -t2 mapIT02.fa $reads > mapIT03.paf
racon -t 16 $reads mapIT03.paf mapIT02.fa > mapIT03.fa


#Hybrid Assembly - Unicycler is an assembly program that specializes in assembling circular genomes. For the hybrid assembly, the nanopore data was used as a template for the illumona data. This was automatically polished.
unicycler -1 $i_1 -2 $i_2 -l $chopped_pore -o unicycler_hybrid_assemblies --threads 16

#Illumina Assembly - This unicycler run was just for illumina data.
unicycler -1 $i_1 -2 $i_2 -o unicycler_illumina_assemblies --threads 16

#Name assemblies
assemblyO=/home/abaryiames/Lab_Projects/polishtest/mapIT03.fa
assemblyI=/home/abaryiames/Lab_Projects/pneumonia_script/unicycler_illumina_assemblies/assembly.fasta
assemblyH=/home/abaryiames/Lab_Projects/pneumonia_script/unicycler_hybrid_assemblies/read_alignment/all_segments.fasta



#dnadiff - DNA diff compares an assembly to a reference genome for statistical information about the accuracy of the assembly.
dnadiff -p oxford_pilon $refdata $assemblyO
dnadiff -p oxford_pilon $refdata $assemblyI
dnadiff -p oxford_pilon $refdata $assemblyH

#Quast.py - Quast is a statisitics program similar to dnadiff. This was used for evaluating the accuracy of the different assemblies.
quast.py $assemblyO -R $refdata --nanopore $reads -o quast_oxford --threads 16
quast.py $assemblyI -R $refdata --pe1 $i_1 --pe2 $i_2 -o quast_illumina --threads 16
quast.py $assemblyH -R $refdata --pe1 $i_1 --pe2 $i_2 --nanopore $reads -o quast_hybrid --threads 16



exit
